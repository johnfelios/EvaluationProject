@page "/admin/{id:int}"

@using BlazorApp1.Services;
@using BlazorApp1.Models;
@inherits BaseComponent
@inject IAppState AppState
@inject IRepositoryService RepositoryService;
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="css/adminStyles.css">

<div class="header">
    <div class="user-info">
        <span>@($"Username:{AppState.Username}")</span>
        <span>@("Admin")</span>
    </div>
    <button class="logout-button" @onclick="Logout">Logout</button>
</div>

<div class="table-container">
    <div class="table-wrapper">
        <h4>Employees and Students</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>User Type</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Age</th>
                    <th>Wage</th>
                    <th>Start Date</th>
                    <th>Position</th>
                    <th>Years of Service</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var teacher in teachers)
                {
                    <tr class="@GetRowClass(teacher, "Teacher")">
                        <td>Teacher</td>
                        <td>@teacher.FirstName</td>
                        <td>@teacher.LastName</td>
                        <td>@teacher.Age</td>
                        <td>@teacher.Wage</td>
                        <td>@teacher.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>-</td>
                        <td>-</td>
                        <td>
                            <button class="button-primary" @onclick="() => EditTeacher(teacher)">Edit</button>
                            <button class="button-danger" @onclick="() => DeleteTeacher(teacher)">Delete</button>
                        </td>
                    </tr>
                }
                @foreach (var student in students)
                {
                    <tr class="@GetRowClass(student, "Student")">
                        <td>Student</td>
                        <td>@student.FirstName</td>
                        <td>@student.LastName</td>
                        <td>@student.Age</td>
                        <td>-</td>
                        <td>@student.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>-</td>
                        <td>-</td>
                        <td>
                            <button class="button-primary" @onclick="() => EditStudent(student)">Edit</button>
                            <button class="button-danger" @onclick="() => DeleteStudent(student)">Delete</button>
                        </td>
                    </tr>
                }

                @foreach (var cleaner in cleaners)
                {

                    <tr class="@GetRowClass(cleaner, "Cleaner")">
                        <td>Cleaner</td>
                        <td>@cleaner.FirstName</td>
                        <td>@cleaner.LastName</td>
                        <td>@cleaner.Age</td>
                        <td>@cleaner.Wage</td>
                        <td>@cleaner.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>-</td>
                        <td>-</td>
                        <td>
                            <button class="button-primary" @onclick="() => EditCleaner(cleaner)">Edit</button>
                            <button class="button-danger" @onclick="() => DeleteCleaner(cleaner)">Delete</button>
                        </td>
                    </tr>
                }
                @foreach (var boardingMember in boardingMembers)
                {
                    <tr class="@GetRowClass(boardingMember, "BoardingMember")">
                        <td>Boarding Member</td>
                        <td>@boardingMember.FirstName</td>
                        <td>@boardingMember.LastName</td>
                        <td>@boardingMember.Age</td>
                        <td>@boardingMember.Wage</td>
                        <td>@boardingMember.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@boardingMember.Position</td>
                        <td>@boardingMember.YearsOfService</td>
                        <td>
                            <button class="button-primary" @onclick="() => EditBoardingMember(boardingMember)">Edit</button>
                            <button class="button-danger" @onclick="() => DeleteBoardingMember(boardingMember)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="form-container">
        <button class="btn btn-primary" @onclick="ShowAddStudentForm">Add Student</button>
        <button class="btn btn-primary" @onclick="ShowAddCourseForm">Add Course</button>
        <button class="btn btn-primary" @onclick="ShowAddCleanerForm">Add Cleaner</button>
        <button class="btn btn-primary" @onclick="ShowAddBoardingMemberForm">Add Boarding Member</button>

     @if (showAddEditForm)
        {
            <EditForm Model="@currentEntity" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @if (currentEntity is StudentViewModel)
                {
                <StudentForm Student="(StudentViewModel)currentEntity"/>
                }
                else if (currentEntity is TeacherViewModel)
                {
                <TeacherForm Teacher="(TeacherViewModel)currentEntity"/>
                }
                else if (currentEntity is CleanerViewModel)
                {
                <CleanerForm Cleaner="(CleanerViewModel)currentEntity" />
                }
                else if (currentEntity is BoardingMemberViewModel)
                {
                <BoardingMemberForm BoardingMember="(BoardingMemberViewModel)currentEntity"/>
                }
                else if (currentEntity is CourseViewModel)
                {
                    <CourseForm Course="(CourseViewModel)currentEntity" />
                }
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </EditForm>
        }
</div>

@code {
    List<TeacherViewModel> teachers;
    List<StudentViewModel> students;
    List<CleanerViewModel> cleaners;
    List<BoardingMemberViewModel> boardingMembers;
    List<CourseViewModel> courses;

    [Parameter]
    public int id { get; set; }

    private object currentEntity;
    private bool showAddEditForm;

    private object newlyAddedEntity;
    private string newlyAddedType;
    private object newlyUpdatedEntity;
    private string newlyUpdatedType;


    protected override async Task OnInitializedAsync()
    {
        Authorize(AppState.AccountId,id);

        teachers = await RepositoryService.GetAllTeachersAsync();
        students = await RepositoryService.GetAllStudentsAsync();
        cleaners = await RepositoryService.GetAllCleanersAsync();
        boardingMembers = await RepositoryService.GetAllBoardingMembersAsync();
        courses = await RepositoryService.GetAllCoursesAsync();
    }


    private void ShowAddStudentForm()
    {
        currentEntity = new StudentViewModel();
        showAddEditForm = true;

    }

    private void ShowAddCourseForm()
    {
        currentEntity = new CourseViewModel();
        showAddEditForm = true;
    }

    private void ShowAddCleanerForm()
    {
        currentEntity = new CleanerViewModel();
        showAddEditForm = true;
    }

    private void ShowAddBoardingMemberForm()
    {
        currentEntity = new BoardingMemberViewModel();
        showAddEditForm = true;
    }

    private void EditTeacher(TeacherViewModel teacher)
    {
        currentEntity = teacher;
        showAddEditForm = true;
    }

    private void EditStudent(StudentViewModel student)
    {
        currentEntity = student;
        showAddEditForm = true;
    }

    private void EditCleaner(CleanerViewModel cleaner)
    {
        currentEntity = cleaner;
        showAddEditForm = true;
    }

    private void EditBoardingMember(BoardingMemberViewModel boardingMember)
    {
        currentEntity = boardingMember;
        showAddEditForm = true;
    }

    private async Task DeleteStudent(StudentViewModel student)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entry?");

        if (confirmed)
        {
            await RepositoryService.RemoveStudentAsync(student);
            await JSRuntime.InvokeVoidAsync("location.reload");

        }
    }

    private async Task DeleteCleaner(CleanerViewModel cleaner)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entry?");

        if (confirmed)
        {
            await RepositoryService.RemoveCleanerAsync(cleaner);
            await JSRuntime.InvokeVoidAsync("location.reload");

        }
    }

    private async Task DeleteTeacher(TeacherViewModel teacher)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entry?");

        if (confirmed)
        {
            await RepositoryService.RemoveTeacherAsync(teacher);
            await JSRuntime.InvokeVoidAsync("location.reload");

        }
    }

    private async Task DeleteBoardingMember(BoardingMemberViewModel boardingMember)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entry?");

        if (confirmed)
        {
            await RepositoryService.RemoveBoardingMemberAsync(boardingMember);
            await JSRuntime.InvokeVoidAsync("location.reload");

        }
    }
    private async Task HandleValidSubmit()
    {
        if (currentEntity is StudentViewModel student)
        {
            if (!students.Contains(student))
            {
                students.Add(student);
                await RepositoryService.AddStudentAsync(student);
                newlyAddedEntity = student;
                newlyAddedType = "Student";
                StateHasChanged();



            }
            else
            {
                await RepositoryService.UpdateStudentAsync(student);
                newlyUpdatedEntity = student;
                newlyUpdatedType = "Student";
            }
        }
        else if (currentEntity is TeacherViewModel teacher)
        {
            if (!teachers.Contains(teacher))
            {
              //Not requested 
            }
            else
            {
                await RepositoryService.UpdateTeacherAsync(teacher);
                newlyUpdatedEntity = teacher;
                newlyUpdatedType = "Teacher";
            }
        }
        else if (currentEntity is CleanerViewModel cleaner)
        {
            if (!cleaners.Contains(cleaner))
            {
                cleaners.Add(cleaner);
                await RepositoryService.AddCleanerAsync(cleaner);
                newlyAddedEntity = cleaner;
                newlyAddedType = "Cleaner";
            }
            else
            {
                await RepositoryService.UpdateCleanerAsync(cleaner);
                newlyUpdatedEntity = cleaner;
                newlyUpdatedType = "Cleaner";
            }
        }
        else if (currentEntity is BoardingMemberViewModel boardingMember)
        {
            if (!boardingMembers.Contains(boardingMember))
            {
                boardingMembers.Add(boardingMember);
                await RepositoryService.AddBoardingMemberAsync(boardingMember);
                newlyAddedEntity = boardingMember;
                newlyAddedType = "BoardingMember";
            
            }
            else
            {
                await RepositoryService.UpdateBoardingMemberAsync(boardingMember);
                newlyUpdatedEntity = boardingMember;
                newlyUpdatedType = "BoardingMember";
            
            }
        }
        else if (currentEntity is CourseViewModel course)
        {
            if (!courses.Contains(course))
            {
                await RepositoryService.AddCourseAsync(course);
            }
        }

        showAddEditForm = false;
        StateHasChanged();
    }
    

    //Method to get the .css backround styling for New and Edited Rows
    private string GetRowClass(object entity, string entityType)
    {
        if (ReferenceEquals(entity, newlyAddedEntity) && newlyAddedType == entityType)
        {
            return "newly-added";
        }
        else if (ReferenceEquals(entity, newlyUpdatedEntity) && newlyUpdatedType == entityType)
        {
            return "newly-updated";
        }
        return "";
    }

    private void Cancel()
    {
        showAddEditForm = false;
        currentEntity = null;
    }
}
